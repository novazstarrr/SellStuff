<form action="/bookings/Bookings/update" method="post">
	<div class="container" id="filter-one">
		<div class="row">
			<div class="col-md-6">
				<div class="container">
					<div class="row">
						<div class="col-lg-12">
							<p class="lead">Edit your order below</p>
						</div>
					</div>


					<!-- USER ID STRING -->
					<p id="user-id" hidden>@ViewBag.UserId</p>

					<!-- BOOKING ID -->
					<input type="hidden" id="bookingid" name="bookingid" />

					<!-- API ERROR MESSAGE -->
					<div class="row" style="display:none;" id="api-error">
						<div class="col-lg-12">
							<p class="text-danger">Something went wrong. Please try again shortly.</p>
						</div>
					</div>

					<!-- BRAND SELECT INPUT -->
					<div class="row">
						<div class="col-12">
							<div class="form-floating">
								<select class="form-select" id="brand" aria-label="Floating label select example">
								</select>
								<label for="brand">Brand</label>
							</div>
						</div>
					</div>

					<!-- Device Type Select Input -->
					<div class="row mt-3">
						<div class="col-12">
							<div class="form-floating">
								<select class="form-select" id="device-type">
									<option selected>Please select a device type</option>
								</select>
								<label for="deviceType">Device Type</label>
							</div>
						</div>
					</div>

					<!-- MODEL SELECT INPUT -->
					<div class="row mt-3">
						<div class="col-12">
							<div class="form-floating">
								<select class="form-select" name="model" id="model">
									<option selected>Please select a model</option>
								</select>
								<label for="Model">Model</label>
							</div>
						</div>
					</div>

					<!-- MEMORY SIZE INPUT -->
					<div class="row mt-3">
						<div class="col-12">
							<div class="form-floating">
								<select class="form-select" name="memorysize" id="memory-size">
									<option selected>Please select memory size</option>
								</select>
								<label for="memorysize">Memory Size</label>
							</div>
						</div>
					</div>

					<!-- Grade Input -->
					<div class="row mt-3">
						<div class="col-12">
							<div class="form-floating">
								<select class="form-select" name="grade" id="grade">
									<option selected>Please select a grade</option>
								</select>
								<label for="grade">Grade</label>
							</div>
						</div>
					</div>
					<!-- Description -->
					<div class="row mt-3">
						<div class="col-12">
							<p class="text-muted" id="description"></p>
						</div>
					</div>
					<!-- DATETIME PICKER -->
					<div class="row mt-3">
						<div class="col-12">
							<div class="row">
								<div class="col-6">
									<label for="dateselector">Select Date</label>
									<input class="form-control" name="dateselector" id="date-selector" type="date" />
								</div>
								<div class="col-6">
									<label for="hourselector">Select Time</label>
									<select disabled class="form-select" name="hourselector" id="hour-selector">
										<option selected>Please Choose</option>
									</select>
								</div>
							</div>
						</div>
					</div>
					<!-- MODAL POPUP BUTTON -->
					<div class="row mt-3">
						<div class="col-12">
							<input type="button" class="btn btn-primary col-6" id="modal-open" value="Submit" style="display:block;" />
						</div>
					</div>
				</div>
			</div>

			<div class="col-md-6">
				<div class="container">
					<!-- PRICING INFORMATION -->
					<div class="row mt-3">
						<div id="pricing-information-container" class="col-12" style="display:none; width:250px;">
							<p class="lead">Estimated sell price</p>
							<p class="lead">£<span id="price"></span></p>
						</div>
					</div>
					<!-- IMAGE -->
					<div class="row mt-3">
						<div id="image-url" class="col-12">
							<img src=""
								 style="max-height: 300px; width: 250px;" />
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!--MODAL POPUP-->
	<div class="modal" id="contact-modal">
		<div id="modal-content" style="margin-top:5%; margin-left:33%">

			<div id="modal-body">
				<p class="lead">Confirm Information</p>
				<div class="form-group col-lg-6 col-md-6">
					<label>First Name:</label>
					<input class="form-control" type="text" name="firstname" id="first-name" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>Last Name:</label>
					<input class="form-control" type="text" name="lastname" id="last-name" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>Address Line 1:</label>
					<input class="form-control" type="text" name="addresslineone" id="address-line-one" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>Address Line 2:</label>
					<input class="form-control" type="text" name="addresslinetwo" id="address-line-two" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>City:</label>
					<input class="form-control" type="text" name="city" id="city" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>Post Code:</label>
					<input class="form-control" type="text" name="postcode" id="post-code" />
				</div>
				<div class="form-group col-lg-6 col-md-6">
					<label>Phone Number:</label>
					<input class="form-control" type="text" name="phonenumber" id="phone-number" />
				</div>
				<input type="button" class="btn btn-danger align-items-center col-lg-3 col-md-6 mt-4" id="back-button" value="Back" />
				<input type="submit" class="btn btn-primary align-items-center col-lg-3 col-md-6 mt-4" id="submit-button" />
			</div>

		</div>
	</div>

</form>

<script src="~/lib/moment/moment-min.js"></script>
<script type="text/javascript">
	//MODAL FORM DATA
	const modalData = {
		firstName: null,
		lastName: null,
		addressLineOne: null,
		addressLineTwo: null,
		city: null,
		postCode: null,
		phoneNumber: null
	};
	//MODAL POPUP
	const modal = document.getElementById("contact-modal");
	const openModal = document.getElementById("modal-open");
	const filterOne = document.getElementById("filter-one");
	const filterTwo = document.getElementById("filter-two");
	const userIdInput = document.getElementById("user-id");
	const userIdText = userIdInput.innerText;
	const firstName = document.getElementById("first-name");
	const lastName = document.getElementById("last-name");
	const addressLineOne = document.getElementById("address-line-one");
	const addressLineTwo = document.getElementById("address-line-two");
	const city = document.getElementById("city");
	const postcode = document.getElementById("post-code");
	const phonenumber = document.getElementById("phone-number");
	const backButton = document.getElementById("back-button");

	openModal.addEventListener('click', function () {
		modal.style.display = 'block';
		filterOne.style.display = 'none';
		fetchUserInfo();
	})



	backButton.addEventListener('click', function () {
		modal.style.display = 'none';
		filterOne.style.display = 'block';
		filterTwo.style.display = 'block';
	})

	window.addEventListener('click', function (e) {
		if (e.target == modal) {
			modal.style.display = 'none';
			filterOne.style.display = 'block';
		}
	})

	async function fetchUserInfo() {
		const response = await fetch(`/api/users/${userIdText}`);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const userInfo = await response.json();

		modalData.firstName = userInfo.firstName;
		modalData.lastName = userInfo.lastName;
		modalData.addressLineOne = userInfo.addressLine1;
		modalData.addressLineTwo = userInfo.addressLine2;
		modalData.city = userInfo.city;
		modalData.phoneNumber = userInfo.phoneNumber;
		modalData.postCode = userInfo.postCode;

		populateModal();
	}

	//POPULATE MODAL POPUP
	async function populateModal() {
		firstName.value = modalData.firstName;
		lastName.value = modalData.lastName;
		addressLineOne.value = modalData.addressLineOne;
		addressLineTwo.value = modalData.addressLineTwo;
		city.value = modalData.city;
		phonenumber.value = modalData.phoneNumber;
		postcode.value = modalData.postCode;
	}
	//PRIMARY KEY ID'S
	const formData = {
		brandId: null,
		deviceTypeId: null,
		modelId: null,
		memorySizeId: null,
		gradeId: null,
		bookingDate: null,
		bookingId: null
	};
	//HAS RUN CHECK'S
	const runCheck = {
		runGradeCheck: false
	};

	//ERROR MESSAGE COMPONENTS
	const apiErrorMessage = document.getElementById("api-error");

	//FORM INPUT ELEMENTS
	//const userIdInput = document.getElementById("user-id");
	//const userIdText = userIdInput.innerText;
	const bookingId = document.getElementById("bookingid");
	const brandInput = document.getElementById("brand");
	const deviceTypeInput = document.getElementById("device-type");
	deviceTypeInput.addEventListener("change", onDeviceTypeChange);
	const modelInput = document.getElementById("model");
	modelInput.addEventListener("change", onModelTypeChange);
	const memorySizeInput = document.getElementById("memory-size");
	memorySizeInput.addEventListener("change", onMemorySizeChange);
	const gradeInput = document.getElementById("grade");
	gradeInput.addEventListener("change", onGradeInputChange);
	const descriptionElement = document.getElementById("description");
	const dateSelectorInput = document.getElementById("date-selector");
	dateSelectorInput.addEventListener("mouseover", onDateMouseOver);
	dateSelectorInput.addEventListener("change", onDateSelectorInputChange);
	const hourSelectorInput = document.getElementById("hour-selector");
	hourSelectorInput.addEventListener("change", onGetHourPickerChange);
	const pricingInformationContainer = document.getElementById("pricing-information-container");
	const priceTextElement = document.getElementById("price");
	const imageUrlElement = document.getElementById("image-url");
	const UpdateButtonElement = document.getElementById("update-button");


	//INITIALIZE BOOKING INFORMATION
	fetchBookingInformation();

	//INITIALIZE BRANDS
	fetchAllBrands();

	//POPULATE BRANDS
	async function fetchAllBrands() {
		const response = await fetch("/api/brands");

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const brands = await response.json();

		for (const brand of brands) {
			const newOption = document.createElement('option');
			newOption.value = brand.id;
			newOption.innerHTML = brand.name;
			newOption.setAttribute("custom-data", "true");

			brandInput.appendChild(newOption);
		}
	}

	//POPULATE CURRENT BOOKING INFORMATION
	async function fetchBookingInformation() {
		const response = await fetch(`/api/bookings/${userIdText}`);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const booking = await response.json();
		console.log(booking);
		formData.brandId = booking[0].model.deviceType.brandId;
		formData.deviceTypeId = booking[0].model.deviceTypeId;
		formData.modelId = booking[0].modelId;
		formData.memorySizeId = booking[0].memorySizeId;
		formData.gradeId = booking[0].gradeId;
		formData.bookingDate = booking[0].bookingDateTime;
		console.log(formData.bookingDate);
		formData.bookingId = booking[0].id;
		setBookingId();
		getDeviceTypes();
		getModelTypes();
		getMemorySizes();
		getGrades();
		getEstimatedPrice();
		bookingDate();
		getBookingHour();

	}
	//SET BOOKING ID
	async function setBookingId() {
		//bookingId.innerHTML = formData.bookingId;
		document.querySelector('input[name="bookingid"]').value = formData.bookingId;


	}

	//GET DEVICE TYPE BASED ON BRANDS ID
	async function getDeviceTypes() {

		const brandId = formData.brandId;
		const response = await fetch("/api/devicetypes?brandId=" + brandId);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		deviceTypes = await response.json();

		for (const deviceType of deviceTypes) {
			const newOption = document.createElement('option');
			newOption.value = deviceType.id;
			newOption.innerHTML = deviceType.name;
			newOption.setAttribute("custom-data", "true");
			if (newOption.value == formData.deviceTypeId) {
				newOption.setAttribute("selected", "selected");
			}
			deviceTypeInput.appendChild(newOption);
		}

	}

	//GET MODELS BASED ON DEVICE TYPE
	async function getModelTypes() {
		const deviceTypesId = formData.deviceTypeId;


		if (deviceTypesId == null) {
			return;
		}

		const response = await fetch("/api/models?deviceTypesId=" + deviceTypesId);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const modelTypes = await response.json();

		for (const modelType of modelTypes) {
			const newOption = document.createElement('option');
			newOption.value = modelType.id;
			newOption.innerHTML = modelType.name;
			newOption.setAttribute("custom-data", "true");
			if (runCheck.runGradeCheck == false) {
				if (newOption.value == formData.modelId) {
					newOption.setAttribute("selected", "selected");
				}
			}

			modelInput.appendChild(newOption);

			modelInput.disabled = false;

		}

	}

	//GET MEMORY SIZES BASED ON MODEL ID
	async function getMemorySizes() {
		const modelId = formData.modelId;

		if (modelId == null) {
			return;
		}

		const response = await fetch("/api/modelsToMemorySize?modelId=" + modelId);
		if (!response.ok) {
			showApiErrorMessage();
		}
		const memorySizes = await response.json();
		console.log(memorySizes);
		for (const memorySize of memorySizes) {
			const newOption = document.createElement('option');
			newOption.value = memorySize.memorySize.id;
			newOption.innerHTML = memorySize.memorySize.name;
			newOption.setAttribute("custom-data", "true");
			if (runCheck.runGradeCheck == false) {
				if (newOption.value == formData.memorySizeId) {
					newOption.setAttribute("selected", "selected");
				}
			}
			memorySizeInput.appendChild(newOption);
			memorySizeInput.disabled = false;

		}
	}

	//GET GRADES FROM ID
	async function getGrades() {
		const memorySizeId = formData.memorySizeId;

		if (memorySizeId == null) {
			return;
		}

		const response = await fetch("/api/grades");

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const gradeTypes = await response.json();
		console.log(gradeTypes);

		for (const gradeType of gradeTypes) {
			const newOption = document.createElement('option');
			newOption.value = gradeType.id;
			newOption.innerHTML = gradeType.name;
			newOption.setAttribute("custom-data", "true");
			if (runCheck.runGradeCheck == false) {
				if (newOption.value == formData.gradeId) {
					newOption.setAttribute("selected", "selected");
				}
			}


			gradeInput.appendChild(newOption);
			gradeInput.disabled = false;
		}
	}
	//GET ESTIMATED PRICE AND IMAGE AND DESCRIPTION
	async function getEstimatedPrice() {
		const response = await fetch(`/api/pricingmatrix?modelId=${formData.modelId}&memorySizeId=${formData.memorySizeId}&gradeId=${formData.gradeId}`);
		if (!response.ok) {
			showApiErrorMessage();
			return;
		}
		const pricingMatrix = await response.json();
		const estimatedPriceOffer = pricingMatrix[0].price;
		if (estimatedPriceOffer == null) {
			throw new Error('No pricing data found for the formData', formData);
		}
		priceTextElement.innerHTML = estimatedPriceOffer;
		pricingInformationContainer.style.display = "block";

		const modelIdResponse = await fetch(`/api/models/${formData.modelId}`);
		if (!modelIdResponse.ok) {
			showApiErrorMessage();
			return;
		}
		const modelIdResponseJavascript = await modelIdResponse.json();
		const modelPictureObject = modelIdResponseJavascript.imageUrl;
		imageUrlElement.querySelector("img").src = modelPictureObject;
		imageUrlElement.style.display = "block";
		openModal.style.display = "block";

		const gradeIdFetch = await fetch(`/api/grades/${formData.gradeId}`);
		if (!gradeIdFetch.ok) {
			showApiErrorMessage();
			return;
		}
		const gradeIdResponseJavascript = await gradeIdFetch.json();
		const gradeDescription = gradeIdResponseJavascript.description;
		descriptionElement.innerHTML = gradeDescription;
	}
	//BOOKING DATE
	async function bookingDate() {
		if (formData.bookingDate.constructor === String) {
			dateSelectorInput.min = moment(formData.bookingDate).format("YYYY-MM-DD");
			dateSelectorInput.max = moment(formData.bookingDate).format("YYYY-MM-DD");
			dateSelectorInput.value = moment(formData.bookingDate).format("YYYY-MM-DD");

		}
	}

	//All Dates ON MOUSE OVER
	async function onDateMouseOver() {
		const endPointResponse = await fetch("/api/dates");

		if (!endPointResponse.ok) {
			showApiErrorMessage();
			return;
		}

		const endPointResponseArray = await endPointResponse.json();

		const newestArrayStringProperty = endPointResponseArray.sort(function (a, b) {
			return new Date(a.from) - new Date(b.from);
		});
		const newestArrayDateProperty = newestArrayStringProperty[0].from;
		const minValueFormat = moment(newestArrayDateProperty).format("YYYY-MM-DD");

		const oldestArraystringProperty = endPointResponseArray.sort(function (a, b) {
			return new Date(b.from) - new Date(a.from);
		});

		const oldestArrayDateProperty = oldestArraystringProperty[0].from;
		const maxValueFormat = moment(oldestArrayDateProperty).format("YYYY-MM-DD");
		dateSelectorInput.min = minValueFormat;
		dateSelectorInput.max = maxValueFormat;

	}
	//SET AND SHOW BOOKING HOUR TIME OPTIONS
	async function getBookingHour() {
		var selectedHourValue = moment(formData.bookingDate).format("HH A");
		const newOption = document.createElement('option');
		newOption.innerHTML = selectedHourValue;
		newOption.setAttribute("custom-data", "true");
		newOption.setAttribute("selected", "selected");
		hourSelectorInput.appendChild(newOption);
	}
	//SELECT HOURS AFTER DATE ON CHANGE
	async function getHourTimePicker() {
		var selectedDateValue = dateSelectorInput.value;
		const endPointResponse = await fetch("/api/dates");
		if (!endPointResponse.ok) {
			showApiErrorMessage();
			return;
		}
		const endPointResponseObject = await endPointResponse.json();
		const dateAndTimesArray = endPointResponseObject.map(obj => new Date(obj.from));
		let filteredArrayByDates = dateAndTimesArray.filter(date => moment(date).format("YYYY-MM-DD") == selectedDateValue);
		for (const filteredArrayByDate of filteredArrayByDates) {
			const newOption = document.createElement('option');
			newOption.innerHTML = moment(filteredArrayByDate).format("HH A");
			newOption.setAttribute = ("custom-date", "true");
			hourSelectorInput.appendChild(newOption);
		}
		hourSelectorInput.disabled = false;
	}

	//DEVICE TYPE ELEMENT CHANGED CALL DEVICE TYPES
	async function onDeviceTypeChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.deviceTypeId = inputValue;

		resetOptions([modelInput, memorySizeInput, gradeInput]);
		await getModelTypes();

	}

	//MODEL TYPE ELEMENT CHANGED CALL MEMORY SIZES
	async function onModelTypeChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.modelId = inputValue;

		resetOptions([memorySizeInput, gradeInput]);
		await getMemorySizes();
	}

	//MEMORY SIZE TYPE ELEMENT CHANGED CALL GRADES
	async function onMemorySizeChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.memorySizeId = inputValue;

		resetOptions([gradeInput]);
		await getGrades();
	}
	//GRADE ELEMENT CHANGED CALL PRICING INFORMATION
	async function onGradeInputChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);
		if (inputValue == -1) {
			inputValue = null;
		}

		formData.gradeId = inputValue;
		await getEstimatedPrice();
	}
	//DATE PICKER CHANGED CALL HOUR SELECTOR
	async function onDateSelectorInputChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			input = null;
		}

		formData.bookingDate = inputValue;

		resetOptions([hourSelectorInput]);
		pricingInformationContainer.style.display = "block";
		imageUrlElement.style.display = "block";


		await getHourTimePicker();
	}
	//HOUR SELECTOR CHANGED CALL UPDATE BUTTON
	async function onGetHourPickerChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);
		if (inputValue == -1) {
			input = null;
		}
		openModal.style.display = "block";
	}
	//SHOW API ERROR MESSAGE
	async function showApiErrorMessage() {
		apiErrorMessage.style.display = "inline-block";
	}
	//HIDE PRICE ELEMENT
	function hidePricingInformationContainer() {
		pricingInformationContainer.style.display = "none";
		imageUrlElement.style.display = "none";
		openModal.style.display = "none";
	}
	//RESET OPTIONS
	async function resetOptions(dropdownInputs) {
		for (const dropdownInput of dropdownInputs) {
			const existingOptions = dropdownInput.querySelectorAll("option[custom-data='true']");
			dropdownInput.disabled = true;

			for (const existingOption of existingOptions) {
				existingOption.remove();
			}
			runCheck.runGradeCheck = true;
		}

		await hidePricingInformationContainer();

	}


</script>
