<form action="/Bookings/SetBookings" method="post">
	<div style="width:50%; float:left;">
	<div class="container">
		<div class="row">
			<div class="col-lg-12">
				<p class="lead">Choose your device from below!!!</p>
			</div>
		</div>

		<!-- ERROR MESSAGE -->
		<div class="row" style="display:none;" id="api-error">
			<div class="col-lg-12">
				<p class="text-danger">Something went wrong. Please try again later.</p>
			</div>
		</div>
		
		<!-- BRAND SELECT INPUT -->
		<div class="row">
			<div class="col-lg-8 col-md-12">
				<div class="form-floating">
					<select disabled class="form-select" name="brand-value" id="brand" aria-label="Floating label select example" required>
						<option selected>Please select a brand</option>
					</select>
					<label for="brand">Brand</label>
				</div>
			</div>
		</div>
		
		<!-- DEVICE TYPE SELECT INPUT -->
		<div class="row mt-3">
				<div class="col-lg-8 col-md-12">
				<div class="form-floating">
					<select disabled class="form-select" name="devicetype" id="device-type" aria-label="Floating label select example">
						<option selected>Please select a device type</option>
					</select>
					<label for="deviceType">Device Type</label>
				</div>
			</div>
		</div>

		<!-- MODEL SELECT INPUT -->
		<div class="row mt-3">
			<div class="col-lg-8 col-md-12">
				<div class="form-floating">
					<select disabled class="form-select" name="model" id="model" aria-label="Floating label select example">
						<option selected>Please select a model</option>
					</select>
					<label for="model">Model</label>
				</div>
			</div>
		</div>

		<!-- MEMORY SIZE SELECT INPUT -->
		<div class="row mt-3">
			<div class="col-lg-8 col-md-12">
				<div class="form-floating">
					<select disabled class="form-select" name="memorysize" id="memory-size" aria-label="Floating label select example">
						<option selected>Please select memory size</option>
					</select>
					<label for="memorySize">Memory Size</label>
				</div>
			</div>
		</div>

		<!-- GRADE SELECT INPUT -->
		<div class="row mt-3">
			<div class="col-lg-8 col-md-12">
				<div class="form-floating">
					<select disabled class="form-select" name="grade" id="grade" aria-label="Floating label select example">
						<option selected>Please select a grade</option>
					</select>
					<label for="grade">Grade</label>
				</div>
			</div>
		</div>
	
		

		<!-- DATETIME PICKER -->
		<div class="row mt-1">
				<div class="col-lg-8 col-md-12">
				<div class="row">
					<div class="col-6">
						<label for="dateselector">Select Date</label>
						<input class="form-control" name="dateselector" id="date-selector" type="date" value=""/>
					</div>
					<div class="col-6">
						<label for="hourselector">Select Time</label>
						<select disabled class="form-select" name="hourselector" id="hour-selector" aria-label="Floating label select example">
							<option selected>Please Choose</option>
						</select>
					</div>
				</div>
			</div>
		</div>
	</div>
	</div>
	<div style="width:50%; float:right;">
		<!-- PRICING INFORMATION -->
		<div class="row mt-3">
			<div id="pricing-information-container" class="col-lg-8 col-md-12" style="display: none">
				<h3>Estimated sell price</h3>
				<p>Â£<span id="price"></span></p>
			</div>
		</div>
		<!-- SUBMIT BUTTON -->
		<div class="row mt-3 col-lg-10">
			<input type="submit" class="btn btn-primary" id="submit-button" value="Submit" disabled />
		</div>
	</div>
</form>

<script src="~/lib/moment/moment-min.js"></script>
<script type="text/javascript">
//PRIMARY KEY ID'S
	const formData = {
		brandId: null,
		deviceTypeId: null,
		modelId: null,
		memorySizeId: null,
		gradeId: null
	};

	//ERROR MESSAGE COMPONENTS
	const apiErrorMessage = document.getElementById("api-error");

	//FORM INPUT ELEMENTS
	const brandInput = document.getElementById("brand");
	brandInput.addEventListener("change", onBrandChange);

	const deviceTypeInput = document.getElementById("device-type");
	deviceTypeInput.addEventListener("change", onDeviceTypeChange);

	const modelInput = document.getElementById("model");
	modelInput.addEventListener("change", onModelChange);

	const memorySizeInput = document.getElementById("memory-size");
	memorySizeInput.addEventListener("change", onMemorySizeChange);

	const gradeInput = document.getElementById("grade");
	gradeInput.addEventListener("change", onGradeInputChange);

	const pricingInformationContainer = document.getElementById("pricing-information-container");
	
	const priceTextElement = document.getElementById("price");

	const dateSelectorInput = document.getElementById("date-selector");
	dateSelectorInput.addEventListener("change", onDateSelectorInputChange);

	const timeWindowSelectorInput = document.getElementById("hour-selector");
	timeWindowSelectorInput.addEventListener("change", onTimeWindowSelectorInputChange);

	const submitButtonElement = document.getElementById("submit-button");
	
	//INITIALIZE BRANDS 
	fetchAllBrands();

	//INITIALIZE AVAILABLE DATES
	fetchAvailableDates();

	//FETCH ALL TIME SLOTS

	//POPULATE BRANDS
	async function fetchAllBrands() {
		const response = await fetch("/api/brands");

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const brands = await response.json();

		for (const brand of brands) {
			const newOption = document.createElement('option');
			newOption.value = brand.id;
			newOption.innerHTML = brand.name;
			newOption.setAttribute("custom-data", "true");

			brandInput.appendChild(newOption);
		}

		brandInput.disabled = false;
	}

	//POPULATE AVAILABLE DATES
	async function fetchAvailableDates() {
		
		const endPointResponse = await fetch("/api/dates");
		
		console.log(endPointResponse);

		if (!endPointResponse.ok) {
			showApiErrorMessage();
			return;
		}

		const endPointResponseObject = await endPointResponse.json();

		//DATES SORTED FROM NEWEST FIRST
		const newestDatesOrder = endPointResponseObject.sort(function(a,b){
			return new Date(a.from) - new Date(b.from);
		});

		//MIN ATTRIBUTE SET AND SORTED
		const newestDate =new Date(endPointResponseObject[0].from);
		var newestDay = newestDate.getDate();
		var newestMonth = newestDate.getMonth() + 1;
		if(newestDay < 10){
			newestDay = '0' + newestDay;
		}
		if(newestMonth < 10){
			newestMonth = '0' + newestMonth;
		}
		var newestYear = newestDate.getUTCFullYear();
		var minDate = newestYear + "-" + newestMonth + "-" + newestDay;
		dateSelectorInput.min = minDate;



		//DATES SORTED FROM OLDEST FIRST
		const oldestDatesOrder = endPointResponseObject.sort(function(a,b){
			return new Date(b.from) - new Date(a.from);
		});

		//MAX ATTRIBUTE SET, SORTED AND FORMATTED
		const oldestDate =new Date(endPointResponseObject[0].from);
		var formatConversion = moment(oldestDate).format("YYYY-MM-DD");
		dateSelectorInput.max = formatConversion;
}

	//GET DEVICE TYPES BASED ON BRAND
	async function getDeviceTypes() {
		const brandId = formData.brandId;

		const response = await fetch("/api/devicetypes?brandId=" + brandId);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const deviceTypes = await response.json();

		for (const deviceType of deviceTypes) {
			const newOption = document.createElement('option');
			newOption.value = deviceType.id;
			newOption.innerHTML = deviceType.name;
			newOption.setAttribute("custom-data", "true");

			deviceTypeInput.appendChild(newOption);
		}

		deviceTypeInput.disabled = false;
	}
	
	//GET MODELS BASED ON DEVICE TYPE SELECTION
	async function getModels() {
		const deviceTypesId = formData.deviceTypeId;

		if (deviceTypesId == null) {
			return;
		}

		const response = await fetch("/api/models?deviceTypesId=" + deviceTypesId);

		if (!response.ok){
			showApiErrorMessage();
			return;
		}

		const modelTypes = await response.json();

		for (const modelType of modelTypes) {
			const newOption = document.createElement('option');
			newOption.value = modelType.id;
			newOption.innerHTML = modelType.name;
			newOption.setAttribute("custom-data", "true");

			modelInput.appendChild(newOption);

		}

		modelInput.disabled = false;
	}

	//GET MEMORY SIZES BASED OFF MODEL SELECTION
	async function getMemorySizes() {

		const modelId = formData.modelId;

		if (modelId == null) {
			return;
		}

		const response = await fetch("/api/modelsToMemorySize?modelId=" + modelId);

		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const memorySizesApis = await response.json();
		console.log(memorySizesApis);

		for (const memorySizesApi of memorySizesApis) {
			const newOption = document.createElement('option');
			newOption.value = memorySizesApi.memorySize.id;
			newOption.innerHTML = memorySizesApi.memorySize.name;
			newOption.setAttribute = ("custom-data", "true");

			memorySizeInput.appendChild(newOption);
		}

		memorySizeInput.disabled = false;
	}

	//GET ALL GRADES
	async function getAllGrades(){

		const memorySizeId = formData.memorySizeId;
		
		if (memorySizeId == null) {
			return;
		}

		const response = await fetch("/api/grades");

		if (!response.ok){
			showApiErrorMessage();
			return;
		}

		const gradeTypes = await response.json();

		for (const gradeType of gradeTypes) {
			const newOption = document.createElement('option');
			newOption.value = gradeType.id;
			newOption.innerHTML = gradeType.name;
			newOption.setAttribute("custom-data", "true");

			gradeInput.appendChild(newOption);
		}

		gradeInput.disabled = false;
	}
	//GET ESTIMATE PRICE BASED ON MODEL & MEMORY & GRADE
	async function getEstimatedPrice() {
		const response = await fetch(`/api/pricingmatrix?modelId=${formData.modelId}&memorySizeId=${formData.memorySizeId}&gradeId=${formData.gradeId}`);
		
		if (!response.ok) {
			showApiErrorMessage();
			return;
		}

		const pricingMatrix = await response.json();
		const priceOfferData = pricingMatrix[0];
		
		if (priceOfferData == null) {
		throw new Error(`No pricing data found for the formData`, formData);
		}

		await showPricingInformationContainer(priceOfferData.price);

		//GET IMAGE BASED ON MODEL
		const modelIdResponse = await fetch(`/api/models/${formData.modelId}`);
		console.log(modelIdResponse);

		if (!modelIdResponse.ok) {
			showApiErrorMessage();
			return;
		}

		const modelIdResponseJavascript = await modelIdResponse.json();
		console.log(modelIdResponseJavascript);
	}
	//SET & SHOW HTML PRICE ELEMENT
	function showPricingInformationContainer(price) {
		priceTextElement.innerHTML = price;
		pricingInformationContainer.style.display = "block";
	}

	//SET AND SHOW TIME OPTIONS
	async function getDateTimePicker() {
		var selectedDateValue = dateSelectorInput.value;
		console.log(selectedDateValue);

		const endPointResponse = await fetch("/api/dates");

		console.log(endPointResponse);

		if (!endPointResponse.ok) {
			showApiErrorMessage();
			return;
		}

		const endPointResponseObject = await endPointResponse.json();

		//CONVERT TO ARRAY AND FORMAT DATETIME
		console.log(endPointResponseObject);
		const dateAndTimesArray = endPointResponseObject.map(obj => new Date(obj.from));
		console.log(dateAndTimesArray);

		//FILTER
		let filteredArrayByDates = dateAndTimesArray.filter(date => moment(date).format("YYYY-MM-DD") == selectedDateValue);
		console.log(filteredArrayByDates);

		//CREATE OPTION ELEMENTS
		for (const filteredArrayByDate of filteredArrayByDates) {
			const newOption = document.createElement('option');
			//newOption.value = filteredArrayByDate.id;
			newOption.innerHTML = moment(filteredArrayByDate).format("HH A");
			newOption.setAttribute("custom-data", "true");

			timeWindowSelectorInput.appendChild(newOption);
		}

		timeWindowSelectorInput.disabled = false;
	}

	//HIDE PRICE ELEMENT
	function hidePricingInformationContainer() {
		pricingInformationContainer.style.display = "none";
	}

	//HIDE API MESSAGE
	function hideApiErrorMessage() {
		apiErrorMessage.style.display = "none";
	}
	
	//SHOW API MESSAGE
	function showApiErrorMessage() {
		apiErrorMessage.style.display = "inline-block";
	}

	//BRAND ELEMENT CHANGED CALL DEVICE TYPES
	async function onBrandChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.brandId = inputValue;

		resetOptions([deviceTypeInput, modelInput, memorySizeInput, gradeInput]);
		await getDeviceTypes();
	}

	//DEVICE ELEMENT CHANGED CALL MODELS
	async function onDeviceTypeChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);
		
		if (inputValue == -1) {
			inputValue = null;
		}
		
		formData.deviceTypeId = inputValue;
		
		resetOptions([modelInput, memorySizeInput, gradeInput]);
		await getModels();
	}

	//MODEL ELEMENT CHANGED CALL MEMORY SIZES
	async function onModelChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1){
		inputValue = null;
		}

		formData.modelId = inputValue;
		resetOptions([memorySizeInput, gradeInput]);
		console.log(resetOptions);

		await getMemorySizes();
	}

	//MEMORY SIZE ELEMENT CHANGED CALL GRADES
	async function onMemorySizeChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);
		console.log(inputValue);

		if (inputValue == -1){
			inputValue = null;
		}

		formData.memorySizeId = inputValue;

		resetOptions([gradeInput]);

		await getAllGrades();
	}

	//GRADE ELEMENT CHANGED CALL PRICES
	async function onGradeInputChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.gradeId = inputValue;

		await getEstimatedPrice();
	}

	//DATE SELECTOR ELEMENT CHANGED CALL DATE TIME PICKER
	async function onDateSelectorInputChange(changeEvent) {
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		formData.dateSelectorId = inputValue;

		await getDateTimePicker();
	}

	//SELECT TIME AND GRADE ELEMENT CHANGED ENABLE SUBMIT
	async function onTimeWindowSelectorInputChange(changeEvent) {
		
		let inputValue = Number(changeEvent.target.value);

		if (inputValue == -1) {
			inputValue = null;
		}

		if (formData.gradeId == -1) {
			inputValue = null;
		}
		console.log(formData.gradeId);

		submitButtonElement.disabled = false;
		
	}

	//RESET OPTIONS
	async function resetOptions(dropdownInputs) {
		for (const dropdownInput of dropdownInputs) {
			const existingOptions = dropdownInput.querySelectorAll("option[custom-data='true']");
			dropdownInput.disabled = true;

			for (const existingOption of existingOptions) {
				existingOption.remove();
			}
		}

		await hidePricingInformationContainer();
	}
</script>